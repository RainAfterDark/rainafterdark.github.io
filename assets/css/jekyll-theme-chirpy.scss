---
---

@use 'sass:list';
@import 'main';

/* append your custom style below */

// Sidebar

#sidebar {
    padding-top: 10dvh;
    top: -10dvh;
    padding-bottom: 10dvh;
    height: 120dvh;
    left: -10px;
    padding-left: 10px;
    box-shadow: var(--bs-box-shadow);
}

#sidebar-canvas-wrapper {
    position: absolute;
    top: -10%;
    height: 100%;
    width: 100%;
    z-index: -1;
    mix-blend-mode: exclusion;
}

// Avatar

$glitch_frames: 0.75;
$glitch_filters: (
    invert: (
        units: '',
        probability: 0.75,
        range: (
            min: 1,
            max: 1
        ),
    ),
    blur: (
        units: 'px',
        probability: 0.25,
        range: (
            min: 1,
            max: 5
        ),
    ),
    opacity: (
        units: '',
        probability: 0.1,
        range: (
            min: 0,
            max: 0
        ),
    ),
);

@function rnd_min_max($min, $max, $unit: '') {
    @return #{random() * ($max - $min) + $min}#{$unit};
}

@function rnd_range($range, $unit: '') {
    @return #{random($range * 2) - ($range * 0.5)}#{$unit};
}

@function rnd_color() {
    @return hsl(random(360), 100%, 50%);
}

@function should_glitch($i, $chance, $refresh) {
    @return random() < $chance and $i % $refresh != 0;
}

@function glitch_value($i, $chance, $refresh, $value, $default: 0) {
    @if(should_glitch($i, $chance, $refresh)) {
        @return #{$value};
    }
    @return #{$default};
}

@mixin img_glitch($chance, $refresh, $duration, $shadow, $translate, $y_min, $scale_min, $scale_max, $skew) {
    $name: unique-id();
    @keyframes #{$name} {
        @for $i from 0 through 100 {
            @if(random() < $glitch_frames) {
                #{$i}% {
                    @if(should_glitch($i, $chance, $refresh)) {
                        $filter_value: '';
                        @each $filter, $filter_props in $glitch_filters {
                            @if(random() < map-get($filter_props, probability)) {
                                $range: map-get($filter_props, range);
                                $min: map-get($range, min);
                                $max: map-get($range, max);
                                $filter_value: $filter_value + 
                                ' #{$filter}(#{rnd_min_max($min, $max)}#{map-get($filter_props, units)})';
                            }
                        }
                        filter: unquote($filter_value) drop-shadow(rnd_range($shadow, px) rnd_range($shadow, px) rnd_color());
                    } @else if($i % $refresh != 0) {
                        filter: none;
                    }
                    transform: 
                        translate(glitch_value($i, $chance * 0.75, $refresh, rnd_range($translate, '%')),
                                  glitch_value($i, $chance * 0.75, $refresh, rnd_range($translate, '%'), $y_min))
                        scale(glitch_value($i, $chance * 0.5, $refresh, rnd_min_max($scale_min, $scale_max, '%'), #{$scale_min}#{'%'}))
                        skew(glitch_value($i, $chance * 0.25, $refresh, rnd_range($skew, deg)));
                }
            }
        }
    }
    animation: $name $duration infinite linear alternate;
}              

@mixin pseudo_glitch($pseudo, $chance, $refresh, $duration) {
    $name: unique-id();
    @keyframes #{$name} {
        @for $i from 0 through 100 {
            #{$i}% {
                @if(should_glitch($i, $chance, $refresh)) {
                    top: #{random(100)}#{'%'};
                    left: #{rnd_range(50)}#{'%'};
                    width: #{rnd_min_max(50, 100)}#{'%'};
                    height: #{rnd_min_max(1, 5)}px;
                    background-color: rnd_color();
                } @else {
                    background: none;
                }
            }
        } 
    }
    &::#{$pseudo} { animation: $name $duration infinite linear alternate; }
}

@mixin pseudos_glitch($chance, $refresh, $duration) {
    @include pseudo_glitch(before, $chance, $refresh, $duration);
    @include pseudo_glitch(after, $chance, $refresh, $duration);
}

#avatar {
    position: relative;
    box-shadow: none !important;
    background-color: white;
    mix-blend-mode: exclusion;
    transition: all 0.25s ease-out;
    
    &::before, &::after {
        content: '';
        background: none;
        pointer-events: none;
        mix-blend-mode: exclusion;
        position: absolute;
        z-index: 1;
    }

    @include pseudos_glitch($chance: 0.1, $refresh: 2, $duration: 5s);
    img {
        @include img_glitch($chance: 0.1, $refresh: 5, $duration: 2.5s,
        $shadow: 5, $translate: 5, $y_min: 5%, $scale_min: 100, $scale_max: 105, $skew: 5);
    }

    &:hover {
        overflow: visible !important;
        filter: invert(1);
        @include pseudos_glitch($chance: 0.75, $refresh: 5, $duration: 5s);
        img {
            @include img_glitch($chance: 0.5, $refresh: 10, $duration: 2.5s,
            $shadow: 10, $translate: 10, $y_min: -5%, $scale_min: 150, $scale_max: 200, $skew: 45);
        }
    }
}

// Other

a.post-preview, .card.categories {
    box-shadow: var(--bs-box-shadow);
}

main {
    opacity: 0;
    &.show {
        animation: fade-up 0.5s forwards ease-out;
    }
}

.parallax-3d {
    transition: transform 0.15s ease-out;
}

.post-tail-wrapper, #tail-wrapper {
    opacity: 0;
    pointer-events: none !important;
    transition: all 0.5s ease-out;

    &.show {
        opacity: 1;
        pointer-events: all !important;
    }
}

#toc-wrapper {
    &.fixed {
        position: fixed;
    }
}

@function gen_rainbow($from, $through) {
    $colors: ();
    @for $i from $from through $through {
        $colors: append($colors, hsl(calc(360 / max($from, $through)) * $i, 100%, 50%), comma);
    }
    @return $colors;
}
    

@mixin rainbow_loop($size, $duration) {
    @keyframes gradient_loop {
        from { background-position: left }
        to { background-position: right }
    }

    $colors: gen_rainbow(1, 12);
    $colors: append($colors, gen_rainbow(11, 1));

    background: linear-gradient(90deg, $colors);
    background-size: $size 100%;
    background-repeat: repeat-x;
    animation: gradient_loop $duration linear infinite;
}

.turbolinks-progress-bar {
    @include rainbow_loop(800%, 5s);
}

.rainbow-text {
    @include rainbow_loop(400%, 1s);
    background-clip: text;
    text-fill-color: transparent;
}

#bg-canvas-wrapper {
    position: fixed;
    width: auto;
    height: 100lvh;
    aspect-ratio: 3 / 7;
    bottom: 0;
    right: 0;
    mix-blend-mode: exclusion;
    opacity: 0.1;
    mask: linear-gradient(90deg, 
        rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 25%,
        rgba(0, 0, 0, 1) 75%, rgba(0, 0, 0, 0) 100%);
    z-index: -99;
    display: inline;
}

a.post-tag {
    backdrop-filter: blur(1px);
}

:root {
    -webkit-backface-visibility: hidden;
    image-rendering: optimizeSpeed;             /*                     */
    image-rendering: -moz-crisp-edges;          /* Firefox             */
    image-rendering: -o-crisp-edges;            /* Opera               */
    image-rendering: -webkit-optimize-contrast; /* Chrome (and Safari) */
    image-rendering: optimize-contrast;         /* CSS3 Proposed       */
    -ms-interpolation-mode: nearest-neighbor;   /* IE8+                */
    -webkit-font-smoothing: subpixel-antialiased;
}